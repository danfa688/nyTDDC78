#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include "ppmio.h"
#include "thresfilter.h"
#include <math.h>

#define NUM_THREADS 4

/* Global variables*/
pixel* src;
struct thread_data{
	long threadId; 
	char *infile;
	char *outfile;
};
struct thread_data thread_data_array[NUM_THREADS];

pthread_mutex_t mutex;
pthread_cond_t cond;
long reading_file_done;
long global_sum_done;
long n_t_done_filter_part_1;
long n_t_done_filter_part_2;

int global_sum;
int sum[NUM_THREADS];
int lproblem[NUM_THREADS][2];
int xsize, ysize;

/* Function declaration */
void calculate_local_problem_size(const int x,const int y,const int np, int lproblem[][2]);

 void *root_t(void *tParam) {
	struct thread_data *myData;
	long tId;
	char *infile;
	char *outfile;
	
	myData=(struct thread_data *) tParam;
	tId = myData->threadId;
	infile = myData->infile;
	outfile = myData->outfile;
	
 	struct timespec stime, etime;
	src = malloc(MAX_PIXELS*sizeof(*src));
	int colmax;
	int i;
	/* read file */
	if(read_ppm (infile, &xsize, &ysize, &colmax, (char *) src) != 0){
		exit(1);
	}

	if (colmax > 255) {
		fprintf(stderr, "Too large maximum color-component value\n");
		exit(1);
	}

	printf("Has read the image\n");
	
	calculate_local_problem_size(xsize, ysize, NUM_THREADS, lproblem);
	
	pthread_mutex_lock(&mutex);
	reading_file_done = 1;
    pthread_cond_broadcast(&cond); 
    pthread_mutex_unlock(&mutex);

    printf("Calling filter\n");

    clock_gettime(CLOCK_REALTIME, &stime);
	
	thresfilter_part_1(xsize, ysize, src, &sum[tId], lproblem[tId][1], lproblem[tId][0]);
    
    /* Check all t done filtering part 1 */
    pthread_mutex_lock(&mutex);
    n_t_done_filter_part_1++;
    pthread_cond_broadcast(&cond);
    while(n_t_done_filter_part_1<NUM_THREADS){
    	pthread_cond_wait(&cond, &mutex);
    }
    pthread_mutex_unlock(&mutex);
	
	pthread_mutex_lock(&mutex);
	for(i = 0; i<NUM_THREADS; i++)
	{
		global_sum += sum[i]; 
	}
	global_sum /= NUM_THREADS;
	global_sum_done = 1;
    pthread_cond_broadcast(&cond); 
    pthread_mutex_unlock(&mutex);
    
    thresfilter_part_2(xsize, ysize, src, global_sum, lproblem[tId][1], lproblem[tId][0]);
    
    /* Check all t done filtering part 2 */
    pthread_mutex_lock(&mutex);
    n_t_done_filter_part_2++;
    pthread_cond_broadcast(&cond);
    while(n_t_done_filter_part_2<NUM_THREADS){
    	pthread_cond_wait(&cond, &mutex);
    }
    pthread_mutex_unlock(&mutex);
    	
    clock_gettime(CLOCK_REALTIME, &etime);

    printf("Filtering took: %g secs\n", (etime.tv_sec  - stime.tv_sec) +
	   1e-9*(etime.tv_nsec  - stime.tv_nsec)) ;

    /* write result */
    printf("Writing output file\n");
    
    if(write_ppm (outfile, xsize, ysize, (char *)src) != 0)
      exit(1);
      
   return NULL;
}

void *other_t(void *tParam) {
	struct thread_data *myData;
	long tId;
	int radius;

	myData=(struct thread_data *) tParam;
	tId = myData->threadId;

    pthread_mutex_lock(&mutex);
    while (!reading_file_done)
    {
    	pthread_cond_wait(&cond, &mutex);
    }
    pthread_mutex_unlock(&mutex);
    
    thresfilter_part_1(xsize, ysize, src, &sum[tId], lproblem[tId][1], lproblem[tId][0]);

    /* Check all t done filtering part 1 */
    pthread_mutex_lock(&mutex);
    n_t_done_filter_part_1++;
    pthread_cond_broadcast(&cond);
    while(n_t_done_filter_part_1<NUM_THREADS || !global_sum_done){
    	pthread_cond_wait(&cond, &mutex);
    }
    pthread_mutex_unlock(&mutex);
        	    
    thresfilter_part_2(xsize, ysize, src, global_sum, lproblem[tId][1], lproblem[tId][0]);
    
    /* Check all t done filtering part 2 */
    pthread_mutex_lock(&mutex);
    n_t_done_filter_part_2++;
    pthread_cond_broadcast(&cond);
    while(n_t_done_filter_part_2<NUM_THREADS){
    	pthread_cond_wait(&cond, &mutex);
    }
    pthread_mutex_unlock(&mutex);   
    
    return NULL;
}

int main (int argc, char ** argv) {
    /* Init */
	pthread_mutex_init(&mutex,NULL);
	pthread_cond_init(&cond, NULL);
	reading_file_done=0;
	global_sum_done = 0;
	n_t_done_filter_part_1=0;
	n_t_done_filter_part_2=0;

    /* Take care of arguments */
	if (argc != 3) {
		fprintf(stderr, "Usage: %s infile outfile\n", argv[0]);
	}
	
	thread_data_array[0].infile=argv[1];
	thread_data_array[0].outfile=argv[2];

/*Create treads*/
	pthread_t threads[NUM_THREADS];
	int ret;
	long t;
	for(t=0;t<NUM_THREADS;t++) {
		thread_data_array[t].threadId = t;
		if (t == 0) {
			ret = pthread_create(&threads[t], NULL, root_t, (void *)&thread_data_array[t]);
		}else{
			ret = pthread_create(&threads[t], NULL, other_t, (void *)&thread_data_array[t]);
		}
		if (ret) {
			printf("ERROR! Return code: %d\n", ret);
			exit(-1);
		}
	} 
	for(t=0;t<NUM_THREADS;t++) {
		pthread_join(threads[t], NULL);
	}
	
	return(0);
}

void calculate_local_problem_size(const int x,const int y,const int np, int lproblem[][2]){
	int linesize, rest;
	int lysize[np];
	linesize = floor(y/np);
	rest = y%np;
	int i;
	int k;
	for (i=0; i<np; i++){
		if(i<rest){
			lysize[i]=linesize+1;
		}else{
			lysize[i]=linesize;
		}
	}
	int tmp;
	for (i=0; i<np; i++){
		tmp=0;
		for (k=0; k<i; k++){
			tmp += lysize[k];
		}
		
		lproblem[i][0]=tmp;
		lproblem[i][1]=lysize[i];
	}
}
